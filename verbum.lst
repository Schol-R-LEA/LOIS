     1                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                                  ; Verbum boot loader for FAT12
     3                                  ; * sets the segments for use in the boot process.
     4                                  ; * loads and verifies the boot image from the second sector, 
     5                                  ;    then transfers control  to it.
     6                                  ;
     7                                  ; Version History (note: build versions not shown) 
     8                                  ; pre      - June 2002 to February 2004 - early test versions
     9                                  ;                * sets segments, loads image from second sector          
    10                                  ; v 0.01 - 28 February 2004 Joseph Osako 
    11                                  ;               * Code base cleaned up
    12                                  ;               * Added BPB data for future FAT12 support
    13                                  ;               * renamed "Verbum Boot Loader"
    14                                  ; v0.02 - 8 May 2004 Joseph Osako
    15                                  ;               *  moved existing disk handling into separate functions
    16                                  ; v0.03 - 7 Sept 2006 Joseph Osako
    17                                  ;               * resumed work on project. Placed source files under
    18                                  ;                 version control (SVN) 	
    19                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    20                                  	
    21                                  ;;constants
    22                                  ;
    23                                  
    24                                  %define boot_base   0x0000      ; the segment:offset pair for the
    25                                  %define boot_offset 0x7C00	;  boot code entrypoint
    26                                  
    27                                  stage2_base   	equ 0x1000      ; the segment:offset to load 
    28                                  stage2_offset   equ 0x0000	; the second stage into
    29                                  stack_seg  	equ 0x9000
    30                                  stack_top	equ 0xFFFC
    31                                  
    32                                  VBIOS	        equ 0x10        ; BIOS interrupt vector for video services
    33                                  GOTO_XY         equ 0x02        ; VBIOS routine - go to the given x, y coordinates
    34                                  block_write     equ 0x09        ; VBIOS routine - write a fixed number of times to the screen
    35                                  ttype	        equ 0x0E        ; VBIOS routine - print character, teletype mode
    36                                  
    37                                  DBIOS	        equ 0x13        ; BIOS interrupt vector for disk services
    38                                  disk_reset	equ 0x00        ; disk reset service
    39                                  disk_read	equ 0x02        ; disk read service
    40                                  
    41                                  ;  BIOS error codes
    42                                  reset_failure   equ 0x01        ; error code returned on disk reset failure
    43                                  read_failure    equ 0x02        ; error code returned on disk read failure
    44                                  
    45                                  ; operational constants 
    46                                  tries           equ 0x03        ; number of times to attempt to access the FDD
    47                                  
    48                                  ;  character constants
    49                                  NULL	        equ 0x00        ; end of string marker
    50                                  CR	        equ 0x0D        ; carriage return
    51                                  LF	        equ 0x0A        ; line feed 
    52                                  
    53                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                                  ;; macros
    55                                  ;
    56                                  %define zero(x) xor x, x
    57                                  
    58                                  %macro write 1
    59                                     mov si, %1
    60                                     call printstr
    61                                  %endmacro
    62                                  
    63                                  
    64                                  [bits 16]
    65                                  [org boot_offset]
    66                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                                  ; entry - the entrypoint to the code. Make a short jump passed the BPB.
    68                                  entry:
    69 00000000 EB42                      jmp short redirect
    70 00000002 90                        nop
    71                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    72                                  ; FAT12 Boot Parameter Block - required by filesystem
    73 00000003 56657262302E3033        OEM_ID                  db "Verb0.03"
    74 0000000B 0002                    Bytes_Per_Sector	dw 0x0200
    75 0000000D 01                      Sectors_Per_Cluster	db 0x01
    76 0000000E 0100                    Reserved_Sectors	dw 0x0001
    77 00000010 02                      FATs		        db 0x02
    78 00000011 E000                    Root_Entries		dw 0x00E0
    79 00000013 400B                    Sectors_Short		dw 0x0B40
    80 00000015 F0                      Media_Descriptor	db 0xF0		   ; assumes 3.5" 1.44M disk
    81 00000016 0900                    Sectors_Per_FAT_Short	dw 0x0009
    82 00000018 1200                    Sectors_Per_Track	dw 0x0012
    83 0000001A 0200                    Heads		        dw 0x02
    84 0000001C 00000000                Hidden_Sectors	        dd 0x00000000
    85 00000020 00000000                Sectors_Long		dd 0x00000000
    86 00000024 00000000                Sectors_Per_FAT_Long	dd 0x00000000
    87 00000028 0000                    Extension_Flags	        dw 0x0000
    88                                  
    89                                  ; extended BPB section
    90 0000002A 00                      Drive_Number		db 0x00
    91 0000002B 00                      Current_Head		db 0x00
    92 0000002C 28                      BPB_Signature		db 0x28
    93 0000002D 01000000                Serial_Number		dd 0x000001
    94 00000031 56657262756D20426F-     Disk_Label              db "Verbum Boot"    ; must be exactly 11 characters
    95 0000003A 6F74               
    96 0000003C 4641543132202020        File_System		db "FAT12   "       ; must be exactly 8 characters
    97                                  
    98                                  
    99                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100                                  ; redirect - do a far jump to ensure that you have the desired 
   101                                  ;          segment:offset location
   102                                  redirect:
   103 00000044 EA[4900]0000              jmp boot_base:start
   104                                  
   105                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
   106                                  ; start
   107                                  ; This is the real begining of the code. The first order of
   108                                  ; business is clearing the interrupts, then setting the
   109                                  ; segment registers and the stack pointer.  
   110                                  
   111                                  start:
   112 00000049 B80090                    mov ax, stack_seg
   113 0000004C FA                        cli
   114 0000004D 8ED0                      mov ss, ax          ; set the stack at an arbitrarily high point past ES.
   115 0000004F BCFCFF                    mov sp,  stack_top  ; put the stack pointer to the top of SS
   116 00000052 FB                        sti                 ; reset ints so BIOS calls can be used
   117 00000053 8CC8                      mov ax, cs
   118 00000055 8ED8                      mov ds, ax          ; set DS == CS	
   119 00000057 8816[C801]                mov [bootdrv], dl   ; save boot drive info for later use
   120                                  
   121                                  	
   122                                  ; read in the data from disk and load it to ES:BX (already initialized)
   123                                    write loading
   124 0000005B BE[0E01]            <1>  mov si, %1
   125 0000005E E85500              <1>  call printstr
   126 00000061 E86900                    call read_disk
   127 00000064 83F801                    cmp ax, reset_failure
   128 00000067 7508                      jne good_reset
   129                                    write reset_failed
   130 00000069 BE[8301]            <1>  mov si, %1
   131 0000006C E84700              <1>  call printstr
   132 0000006F EB3C                      jmp short shutdown
   133                                  good_reset:
   134 00000071 83F802                    cmp ax, read_failure
   135 00000074 7508                      jne good_read
   136                                    write read_failed
   137 00000076 BE[9A01]            <1>  mov si, %1
   138 00000079 E83A00              <1>  call printstr
   139 0000007C EB2F                      jmp short shutdown
   140                                  
   141                                  good_read:
   142                                    write done
   143 0000007E BE[2401]            <1>  mov si, %1
   144 00000081 E83200              <1>  call printstr
   145                                  
   146 00000084 A0[C801]                  mov al, [bootdrv]
   147 00000087 50                        push ax            		; send boot drive information to 2nd stage
   148                                  	
   149                                  ; set up fake return frame for code returning from second stage
   150 00000088 8CC8                      mov ax, cs
   151 0000008A 50                        push ax
   152 0000008B B8[A000]                  mov ax, re_enter
   153 0000008E 50                        push ax  
   154                                  
   155                                  ; fake a jump to the second stage entry point
   156 0000008F B80010                    mov ax, stage2_base
   157 00000092 8EC0                      mov es, ax
   158 00000094 BB0000                    mov bx, stage2_offset
   159 00000097 06                        push es
   160 00000098 53                        push bx
   161                                    write snd_stage
   162 00000099 BE[2C01]            <1>  mov si, %1
   163 0000009C E81700              <1>  call printstr
   164 0000009F CB                        retf
   165                                  
   166                                  re_enter:
   167 000000A0 8CC8                      mov ax, cs
   168 000000A2 8ED8                      mov ds, ax
   169 000000A4 58                        pop ax       			; clean up stack
   170 000000A5 58                        pop ax
   171 000000A6 58                        pop ax
   172                                    write returned
   173 000000A7 BE[6101]            <1>  mov si, %1
   174 000000AA E80900              <1>  call printstr
   175                                  
   176                                  shutdown:
   177                                     write exit
   178 000000AD BE[B801]            <1>  mov si, %1
   179 000000B0 E80300              <1>  call printstr
   180                                  halted:
   181 000000B3 F4                         hlt
   182 000000B4 EBFD                       jmp short halted
   183                                     
   184                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   185                                  ;; Auxilliary functions      
   186                                  
   187                                  ;; printstr - prints the string point to by SI
   188                                  
   189                                  printstr:
   190 000000B6 50                        push ax
   191 000000B7 B40E                      mov ah, ttype        ; set function to 'teletype mode'
   192                                    .print_char:   
   193 000000B9 AC                          lodsb               ; update byte to print
   194 000000BA 3C00                        cmp al, NULL        ; test that it isn't NULL
   195 000000BC 7404                        jz short .endstr
   196 000000BE CD10                        int  VBIOS          ; put character in AL at next cursor position
   197 000000C0 EBF7                        jmp short .print_char
   198                                  .endstr:
   199 000000C2 58                        pop ax
   200 000000C3 C3                        ret
   201                                  
   202                                  
   203                                  ; reset_disk
   204                                  reset_disk:
   205 000000C4 8A16[C801]                mov dl, [bootdrv]
   206 000000C8 B400                      mov ah, disk_reset
   207 000000CA CD13                      int DBIOS
   208 000000CC C3                        ret
   209                                  
   210                                  ; read_disk
   211                                  read_disk:
   212 000000CD B90300                    mov cx, tries        ; set count of attempts for disk reads
   213                                    .try_read:
   214 000000D0 51                          push cx
   215 000000D1 B90300                      mov cx, tries      ; set count of attempts to reset disk
   216                                      .try_reset:
   217 000000D4 E8EDFF                        call reset_disk
   218 000000D7 7308                          jnc short .read
   219 000000D9 E2F9                          loop .try_reset       ; if the reset fails, try up to three times
   220 000000DB B80100                        mov ax, reset_failure ; if all three fail, set an error code and return
   221 000000DE 59                            pop cx                ; make sure that the stack is correctly aligned
   222 000000DF EB2C                          jmp short .end_fail
   223                                    .read:
   224 000000E1 B80010                      mov ax, stage2_base
   225 000000E4 8EC0                        mov es, ax
   226 000000E6 8A16[C801]                  mov dl, [bootdrv] 
   227 000000EA 8A2E[C901]                  mov ch, [cyl]           ; cylinder
   228 000000EE 8A36[CA01]                  mov dh, [head]          ; head
   229 000000F2 8A0E[CB01]                  mov cl, [startsector]   ; first sector 
   230 000000F6 A0[CC01]                    mov al, [numsectors]    ; number of sectors to load   
   231 000000F9 B402                        mov ah, disk_read
   232 000000FB BB0000                      mov bx, stage2_offset
   233 000000FE CD13                        int DBIOS
   234 00000100 7308                        jnc short .end_success
   235 00000102 59                          pop cx
   236 00000103 E2CB                        loop .try_read
   237 00000105 B80200                    mov ax, read_failure ; if attempts to read the disk fail, report error code
   238 00000108 EB03                      jmp short .end_fail
   239                                  .end_success:
   240 0000010A 59                        pop cx               ; make sure that the stack is correctly aligned
   241 0000010B 31C0                      zero(ax)
   242                                  .end_fail:
   243 0000010D C3                        ret
   244                                  	
   245                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   246                                  ;; data
   247 0000010E 4C6F6164696E672073-     loading         db 'Loading stage two... ', NULL
   248 00000117 746167652074776F2E-
   249 00000120 2E2E2000           
   250 00000124 646F6E652E0D0A00        done            db 'done.', CR, LF, NULL
   251 0000012C 5365636F6E64207374-     snd_stage	db 'Second stage loaded, proceeding to switch context.', CR, LF, NULL
   252 00000135 616765206C6F616465-
   253 0000013E 642C2070726F636565-
   254 00000147 64696E6720746F2073-
   255 00000150 776974636820636F6E-
   256 00000159 746578742E0D0A00   
   257 00000161 436F6E74726F6C2072-     returned	db 'Control returned to first stage, ', NULL
   258 0000016A 657475726E65642074-
   259 00000173 6F2066697273742073-
   260 0000017C 746167652C2000     
   261 00000183 436F756C64206E6F74-     reset_failed	db 'Could not reset drive,', NULL
   262 0000018C 207265736574206472-
   263 00000195 6976652C00         
   264 0000019A 436F756C64206E6F74-     read_failed	db 'Could not read second stage, ', NULL
   265 000001A3 207265616420736563-
   266 000001AC 6F6E64207374616765-
   267 000001B5 2C2000             
   268 000001B8 2073797374656D2068-     exit            db ' system halted.', NULL
   269 000001C1 616C7465642E00     
   270                                  
   271 000001C8 <res 00000001>          bootdrv	        resb 1      ; byte reserved for boot drive ID number
   272          ******************       warning: uninitialized space declared in .text section: zeroing
   273                                  
   274                                  ; DBIOS arguments, values given are defaults
   275 000001C9 00                      cyl             db 0        ; cylinder to read from
   276 000001CA 00                      head	        db 0        ; head to read from
   277 000001CB 02                      startsector	db 2        ; sector to start reading at
   278 000001CC 01                      numsectors	db 1        ; number of sectors to read
   279                                  	
   280                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   281                                  ;; pad out to 510, and then add the last two bytes needed for a boot disk
   282                                  
   283 000001CD 00<rept>                space   times (0x0200 - 2) - ($-$$) db 0
   284 000001FE 55AA                    bootsig   dw 0xAA55 
